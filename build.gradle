buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'bintray'

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.projectlombok:lombok:1.12.6'
    testCompile 'junit:junit:4.11'
}

artifacts {
    archives jar
}

publishing {
    publications {
        groovyMaven(MavenPublication) {
            from components.java
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : 'fake_user'
    key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : 'fake_key'
    println "KEY: $key"
    publications = ['groovyMaven']
    pkg {
        repo = 'libjava'
        name = 'libjava'
        licenses = ['Unlicense']
    }
}

task delombok {
    def srcDelomboked = 'build/src-delomboked'
    def srcJava = 'src/main/java'

    // delombok task may depend on other projects already being compiled
    dependsOn configurations.compile.getTaskDependencyFromProjectDependency(true, "compileJava")

    // Set up incremental build, must be made in the configuration phase (not doLast)
    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    doLast {
        def collection = files(configurations.compile)
        def sumTree = collection + fileTree(dir: 'bin')

        ant.taskdef(name: 'delombok',
                classname: 'lombok.delombok.ant.DelombokTask', classpath: configurations.compile.asPath)
        ant.delombok(from:srcJava, to:srcDelomboked, classpath: sumTree.asPath)

        copy {
            from srcDelomboked
            into srcJava
        }
    }
}
